-- MAIN LOADER v1.5 (GITHUB MODULES)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Store Rayfield globally for modules
shared.Rayfield = Rayfield

local Window = Rayfield:CreateWindow({
    Name = "ReportBait.exe by TnT",
    LoadingTitle = "Initializing...",
    LoadingSubtitle = "Secure Loader v1.5 (GitHub)",
    ConfigurationSaving = true,
    KeySystem = true,
    KeySettings = {
        Title = "TnT Access",
        Subtitle = "Enter clan key",
        Note = "Key rotates weekly",
        FileName = "TnT_Key",
        SaveKey = true,
        Key = "tapshift"
    }
})

-- Verify key system success
if not Window then
    Rayfield:Notify({
        Title = "Key Rejected",
        Content = "Invalid access key",
        Duration = 5
    })
    return
end

-- Updated GitHub module loader with cache busting
local TnT_Modules = {
    Player = "https://raw.githubusercontent.com/tap-shift/ts-repbt/main/PLAYER_MODULE.lua",
    Farm = "https://raw.githubusercontent.com/tap-shift/ts-repbt/main/FARM_MODULE.lua",
    PvP = "https://raw.githubusercontent.com/tap-shift/ts-repbt/main/PVP_MODULE.lua",
    Settings = "https://raw.githubusercontent.com/tap-shift/ts-repbt/main/SETTINGS_MODULE.lua"
}

-- Secure loader with version validation
for name, url in pairs(TnT_Modules) do
    local success, err = pcall(function()
        -- Add cache busting and basic auth
        local moduleSrc = game:HttpGet(url .. "?t=" .. os.time() .. "&v=1.5", true)
        
        -- Verify the module isn't empty
        if #moduleSrc < 50 then
            error("Module too short - possible fetch error")
        end
        
        local module = loadstring(moduleSrc)()
        if type(module) == "function" then
            module(Window)
        else
            error("Invalid module structure")
        end
    end)
    
    if not success then
        Rayfield:Notify({
            Title = name.." Module Failed",
            Content = tostring(err),
            Duration = 5
        })
        -- Create emergency tab if critical module fails
        if name == "Player" then
            local EmergencyTab = Window:CreateTab("ERROR", "alert-triangle")
            EmergencyTab:CreateLabel("Critical module failed to load")
        end
    end
    task.wait(0.75) -- More conservative rate limiting
end

-- Home Tab with version info
local HomeTab = Window:CreateTab("Home", "home")
HomeTab:CreateSection("System Status")
HomeTab:CreateLabel("GitHub Modules v1.5 loaded")
HomeTab:CreateLabel("Last update: " .. os.date("%Y-%m-%d"))

-- Auto-update notifier (optional)
spawn(function()
    wait(10)
    Rayfield:Notify({
        Title = "Secure Loader Active",
        Content = "Modules loaded from private GitHub",
        Duration = 5
    })
end)
