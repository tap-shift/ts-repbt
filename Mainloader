-- MAIN LOADER v2.3 (SmallFixes)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
shared.Rayfield = Rayfield

local Window = Rayfield:CreateWindow({
    Name = "ReportBait.exe by TnT",
    LoadingTitle = "Initializing Modules...",
    LoadingSubtitle = "Loader v2.3 (Release)",
    ConfigurationSaving = true,
    KeySystem = true,
    KeySettings = {
        Title = "TnT Access",
        Subtitle = "Enter clan key",
        Note = "Key rotates weekly",
        FileName = "TnT_Key",
        SaveKey = true,
        Key = "tapshift"
    }
})

-- Home Tab FIRST
local HomeTab = Window:CreateTab("Home", "home")
HomeTab:CreateSection("System Status")
HomeTab:CreateLabel("Main system initialized")

-- Ordered module list (Farm → PvP → Player → Settings)
local OrderedModules = {
    {name = "Farm", url = "https://raw.githubusercontent.com/tap-shift/ts-repbt/main/FARM_MODULE"},
    {name = "PvP", url = "https://raw.githubusercontent.com/tap-shift/ts-repbt/main/PVP_MODULE"},
    {name = "Player", url = "https://raw.githubusercontent.com/tap-shift/ts-repbt/main/PLAYER_MODULE"},
    {name = "Settings", url = "https://raw.githubusercontent.com/tap-shift/ts-repbt/main/SETTINGS_MODULE"}
}

for _, module in ipairs(OrderedModules) do
    local success, err = pcall(function()
        local moduleSrc = game:HttpGet(module.url.."?t="..os.time(), true)
        
        if not moduleSrc:match("return function") and not moduleSrc:match("Window") then
            local tab = Window:CreateTab(module.name, "question")
            tab:CreateLabel("Module placeholder")
            tab:CreateLabel("Content coming soon!")
            return
        end
        
        local loaded = loadstring(moduleSrc)()
        if type(loaded) == "function" then
            loaded(Window)
        else
            local tab = Window:CreateTab(module.name, "alert-circle")
            tab:CreateLabel("Module loaded with irregular structure")
        end
    end)
    
    if not success then
        local tab = Window:CreateTab(module.name.." (Error)", "alert-triangle")
        tab:CreateLabel("Load error:")
        tab:CreateLabel(tostring(err):sub(1, 50))
        warn("["..module.name.." Module] "..tostring(err))
    end
    task.wait(0.5)
end

-- Update Home Tab after all modules load
HomeTab:CreateLabel("Tabs loaded successfully.")
HomeTab:CreateLabel("System ready at "..os.date("%X"))

HomeTab:CreateSection("Information")
HomeTab:CreateLabel("Discord Server")

local Button = HomeTab:CreateButton({
   Name = " Join ",
   Callback = function()
       -- Open Discord invite in system browser
       local http = game:GetService("HttpService")
       local success, err = pcall(function()
           http:RequestAsync({
               Url = "http://127.0.0.1:6463/rpc?v=1",
               Method = "POST",
               Headers = {
                   ["Content-Type"] = "application/json",
                   ["Origin"] = "https://discord.com"
               },
               Body = http:JSONEncode({
                   cmd = "INVITE_BROWSER",
                   args = {
                       code = "YWj4PHWcjV"
                   },
                   nonce = http:GenerateGUID(false)
               })
           })
       end)
       
       -- Fallback to regular browser if Discord app fails
       if not success then
           game:GetService("StarterGui"):SetCore("SendNotification", {
               Title = "Opening Browser",
               Text = "Redirecting to Discord...",
               Duration = 3
           })
           local success2 = pcall(function()
               game:GetService("GuiService"):OpenBrowserWindow("https://discord.gg/YWj4PHWcjV")
           end)
           if not success2 then
               game:GetService("GuiService"):OpenBrowserWindow("https://discord.gg/YWj4PHWcjV")
           end
       end
   end,
})
